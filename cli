#!/usr/bin/perl

# Copyright (c) 2014 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Term::ReadLine;

eval {
use Finance::CoinBase;
};
if ($@) {
	printf STDERR "You need to install Finance::CoinBase\n";
}

our $personality = shift @ARGV;
if (!defined($personality)) {
	print STDERR "cli requires the personality arg at a mimimum\n";
	exit(1);
}

our ($id, $secret);

my $configfile = $ENV{'HOME'}."/.".$personality.".conf";
if (-f $configfile) {
	open(CONFIG, $configfile);
	while(<CONFIG>) {
		my $line;
		chomp($line = $_);
		if ($line =~ /^([a-z]+)\s*=\s*(.*)$/) {
			my ($var,$val) = ($1,$2);
			$val =~ s/#.*$//g;
			if ($var eq "id") {
				$id = $val;
			} elsif ($var eq "secret") {
				$secret = $val;
			} else {
				printf STDERR "Unrecognized: '%s' = '%s'\n",
				    $var, $val;
			}
		}
	}
	close(CONFIG);
}

my $spore;

if (!defined($id) || !defined($secret)) {
	print STDERR "id and secret must both be defined.\n";
	print STDERR "Functions requiring this will not work\n";
} elsif(0) {
	use URI;
	my $uri = URI->new('https://coinbase.com/api/v1');
	$uri->path('oauth/authorize');
	my %query = (
		client_id => $id,
		redirect_uri => print,
		response_type => 'code',
	);
	$uri->query_form(%query);
	print $uri->as_string;
	exit(0);
}


my $apifile = $ENV{'HOME'}."/git/sw/api-description/services/".$personality.".json";

if (! -f $apifile) {
	printf STDERR "apifile '%s' not found, bailing\n", $apifile;
	exit(1);
}

$spore = Finance::CoinBase->new( { apifile => $apifile } );

our $fun = { };

$fun->{coinbase}->{button}->{func} = "cbutton";
$fun->{coinbase}->{button}->{auth} = 1;
sub cbutton {
	my ($spore, $cmd, @argv) = @_;
	printf STDERR "my cmd = %s\n", $cmd;
	return $spore->api($cmd, {
		name => "Test",
		price_string => "2600",
		price_currency_iso => "USD"
	});
}

$fun->{bter}->{ticker}->{func} = "bticker";
sub bticker {
	my ($spore, $cmd, @argv) = @_;
	return $spore->api($cmd, {
		cura => $argv[0],
		curb => $argv[1]
	});
}

$fun->{virwox}->{getBestPrices}->{func} = "vsymbols";
$fun->{virwox}->{getMarketDepth}->{func} = "vsymbols";
sub vsymbols {
	my ($spore, $cmd, @argv) = @_;

	if (!defined($argv[0])) {
		printf STDERR "Need symbols for '%s'\n",$cmd;
		return;
	}

	my $listname;
	my %parms;
	if ($cmd eq "getBestPrices") {
		$listname = "symbols";
	} elsif ($cmd eq "getMarketDepth") {
		$listname = "symbols";
		#$listname = "instruments";
		$parms{'buyDepth'} = 5;
		$parms{'sellDepth'} = 5;
	} else {
		print STDERR "unhandled: '%s'\n",$cmd;
		return;
	}
	$parms{'id'} = 1;
	$parms{'method'} = $cmd;
	my $i=0;
	foreach my $arg (@argv) {
		my $sym = $listname."%5b".$i++."%5d";
		$parms{$sym} = $arg;
	}
	return $spore->api($cmd, { %parms });
}
		
our $authenabled = 0;

if (@ARGV) {
	act( @ARGV );
	exit(0);
}

my $term = Term::ReadLine->new($personality, *STDIN, *STDOUT);
$term->ornaments(0);

my $prompt = $personality."> ";
my $line;
while (1)
{
	chomp($line = $term->readline($prompt));
	if (!defined($line)) {
		exit(0);
	}
	act( split(/[ ]+/,$line) );
}

sub
enableauth
{
	if (!defined($id) || !defined($secret)) {
		print STDERR "id and secret must both be defined.\n";
		print STDERR "This function will fail.\n";
		return;
	}
	if ($authenabled) {
		return;
	}
	$authenabled = 1;
	my $authret = $spore->{api}->enable(
	    'Auth::OAuth',
	    consumer_key    => $id,
	    consumer_secret => $secret,
	);
	$spore->dumpit($authret);
}

sub
act
{
	my (@argv) = @_;
	my %result;
	my @resultkeys;
	my $res;
	if (!defined($argv[0])) {
		return;
	}
	my $cmd = shift @argv;
	my $func = $fun->{$personality}->{$cmd}->{func};
	if (defined($func)) {
		my $auth = $fun->{$personality}->{auth};
		if (defined($auth) && $fun->{$personality}->{auth} == 1) {
			enableauth();
		}
		eval "\$res = ${func}(\$spore, \$cmd, \@argv)";
	} elsif ($cmd eq "quit") {
		exit(0);
	} elsif ($cmd eq "button") {
		enableauth();
		$res = $spore->api($cmd, { name => "Test",
		    price_string => "2600", price_currency_iso => "USD" });
	} else {
		$res = $spore->api($cmd);
	}

	if (!defined($res)) {
		print "<undef>\n";
		return;
	}

	$spore->dumpit($res);
	return;
	apikeywarn:
	printf STDERR "%s requires an api key, noop\n", $argv[0];
}
